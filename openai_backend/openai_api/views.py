from django.shortcuts import render
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
import openai  # Assuming you have OpenAI Python library installed
from openai_api.models import Message
from openai_backend.settings import OPENAI_API_KEY
from rest_framework.views import APIView
from rest_framework.status import (
    HTTP_200_OK,
    HTTP_400_BAD_REQUEST,
)
from openai_api.serializers import MessageSerializer
from rest_framework.response import Response
from openai.error import InvalidRequestError

@csrf_exempt
def openai_endpoint(request):
    # if request.method == 'POST':
        data = request.POST.get('text', '')
        # Process the data and generate the answer using OpenAI library
        answer = "This is a sample answer generated by OpenAI."

        return JsonResponse({'answer': answer})




openai.api_key = OPENAI_API_KEY

class ChatView(APIView):
    
    def post(self, request, *args, **kwargs):
        
        try:
            message = request.data.get('message', None)
        
            if message is None:
                raise ValueError("Message content cannot be null.")
            
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {
                        "role": "user",
                        "content": message
                    }
                ]
            )
            response_text = response['choices'][0]['message']['content']
            Message.objects.create(text=response_text)
            return Response({'message': response_text})

        except InvalidRequestError as e:
            return Response({'message': str(e)}, status=HTTP_400_BAD_REQUEST)
        except Exception as e:
            return Response({'message': str(e)}, status=HTTP_400_BAD_REQUEST)
        
    def get(self, request, *args, **kwargs):
        
        try:
            responses = Message.objects.all()
            serialized_responses = MessageSerializer(responses, many=True).data
            return Response({'message': serialized_responses})
        except Exception as e:
            return Response({'message': str(e)}, status=HTTP_400_BAD_REQUEST)